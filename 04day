

01-项目-用户管理-用户列表-编辑用户-显示编辑数据
数据回填到编辑对话框
  // 编辑用户数据
  ediuserdata(userinfo){
    this.dialogFormVisible2=true;//打开编辑的对话框
    //将值赋予给ediform
    this.ediform=userinfo;
  }
  将值复给ediform

    <el-form-item label="用户名" label-width="120px">
        <el-input v-model="ediform.username" autocomplete="off"></el-input>
    </el-form-item>
    他就会自动渲染出来


 02-项目-用户管理-用户列表-编辑用户-发送请求
 在修改数据的时候  需要使用用户id
    
    ediuserid: "" //编辑发送需要的id


    // 编辑用户数据
    ediuserdata(userinfo) {
      this.dialogFormVisible2 = true; //打开编辑的对话框
      //将值赋予给ediform
      this.ediform = userinfo;
      this.ediuserid = userinfo.id; //编辑发送请求需要deid
    },

    // 编辑先远程服务器发送数据
    async getxiugaiuerdata() {
      const res = await this.$http.put(`users/${this.ediuserid}`, this.ediform);
      console.log("shifou ", res);

      const {
        meta: { msg, status }
      } = res.data;
      if (status == 200) {
        this.$message({
          showClose: true,
          message: msg,
          type: "success"
        });
        this.dialogFormVisible2 = false;
      } else {
        this.$message({
          showClose: true,
          message: msg,
          type: "error"
        });
      }
    }


03-项目-用户管理-用户列表-修改用户状态 更该状态
       <el-table-column label="用户状态" width="180">
        <template slot-scope="tableData">
          <el-switch
            @change="getstate(tableData.row)"
            v-model="tableData.row.mg_state"
            active-color="#13ce66"
            inactive-color="#ff4949"
          ></el-switch>
        </template>
      </el-table-column>


   async  getstate(row) {
      alert("假装改变了");
      const res=await this.$http.put(`users/${row.id}/state/${row.mg_state}`)
    //   console.log("状态改变了",res);
       const { meta: { msg, status }  } = res.data;
      if(status==200){
          this.$message({
          showClose: true,
          message: msg,
          type: "success"
          })
      }
    },


 v-model="tableData.row.mg_state"是双向绑定
 所以可以没有设置false之类的就可以 动态变化开关

 04-项目-用户管理-用户列表-分配角色-功能演示 ok

05-项目-用户管理-用户列表-分配角色-显示对话框
   <el-select v-model="currRoleId">
                <el-option label="请选择" :value="-1"></el-option>
                <el-option label="区域二" value="beijing"></el-option>
            </el-select>
  currRoleId:"-1",

  如果select绑定的数据的值，和option的value值一样
  就会显示该option的label值

06-项目-用户管理-用户列表-分配角色-显示对话框-下拉框 ok


09-07-项目-用户管理-用户列表-分配角色-显示当前用户角色微刊 ok


分配角色时  显示用户名
1==》动态传递参数
  <el-button  @click="getgou(tableData.row)" type="success" size="small" plain icon="el-icon-check" circle></el-button>

2==》接受后赋值
  getgou(row){
      this.dialogFormVisible3=true;
       this.currentName=row.username
    }

3==》渲染
  <el-form-item label="活动名称" label-width="120px">
    {{currentName}}
  </el-form-item>   


05 
  如果select绑定的数据的值，和option的value值一样
  就会显示该option的label值 重点
  v-model="currRoleId"绑定的值与    
  :value="item.id"相同，就会显示  就会显示该option的label值 重点

<el-form-item label="活动区域" label-width="120px">
    <el-select v-model="currRoleId">
        <el-option label="请选择" :value="-1"></el-option>
        <el-option 
          :label="item.roleName"
          :value="item.id"
          v-for="(item,i) in roles" :key="i"></el-option>
    </el-select>
</el-form-item>


    async getgou(row){
      this.dialogFormVisible3=true;
       this.currentName=row.username;
        
       const res1=await this.$http.get("roles");
       console.log("res1",res1) 
       this.roles=res1.data.data;

       const res=await this.$http.get(`users/${row.id}`);
       console.log("从远端胡",res)
       this.currRoleId=res.data.data.rid;
    }





//   
async getgou(row){
  this.dialogFormVisible3=true;
    this.currentName=row.username;
    
    const res1=await this.$http.get("roles");
    console.log("res1",res1) 
    this.roles=res1.data.data;

    const res=await this.$http.get(`users/${row.id}`);
    console.log("从远端胡",res)
    this.currRoleId=res.data.data.rid;
}


08-项目-用户管理-用户列表-分配角色-修改用户角色ok

  //  修改用户的角色 不休要刷新  因为点击对话按钮 会重新发送请求
   async setRole(){
        const res=await this.$http.put(`users/${this.getuserid}/role`,{rid:this.currRoleId});
        console.log("shifou",res);
        this.dialogFormVisible3=false;
    }
09-项目-用户管理-用户列表-合并分支-推送ok


-------------------------------
04day==>ishouldgodo ishouldgodo
03==>改变开关的状态     @change="getstate()"

 <el-table-column label="用户状态" width="180">
        <template slot-scope="tableData">
          <el-switch
            @change="getstate()"
            v-model="tableData.row.kg"
            active-color="#13ce66"
            inactive-color="#ff4949"
          ></el-switch>
        </template>
      </el-table-column>


 05day
git checkout -b  dev-rights 新建分支



-----------------------------



11day  自定义全局组件面包屑  在任何地方都可以使用
data中数据的值 来源于自己  由自己维护
所以组件中的值 不能够够写在data中
组件中的值 要来源于将来我使用的位置


1==>写组件
Vue注册全局组件的步骤
(1) 写组件 
(2)定义组件的名称 和数据
(3)在main.js中引入
(4)Vue.component("my-bread", MyBread);注册


新建文件夹(cuscom)    文件(myBread.vue)
在myBread.vue文件如下
{
    <template>
        <el-breadcrumb separator="/">
            <el-breadcrumb-item :to="{ path: '/' }">首页</el-breadcrumb-item>
            <el-breadcrumb-item>
              <a href="/">{{value1}}</a>
            </el-breadcrumb-item>
            <el-breadcrumb-item>{{value2}}</el-breadcrumb-item>
        </el-breadcrumb>
    </template>

    <script>
        // 自定义组件  面包屑
        export default {
        name: "my-bread", //给组件起一个名字
        data() {
            return {};
        },
        // props外界来的数据
        // props值是字符串数组
        // props中的数据的值，来源于使用组件时 传递的值
         props: ["value1", "value2"]
    };
    </script>
}

2==>在main.js中导入组件  在main.js 组件 注册
import MyBread from "@/components/cuscom/myBread.vue";
Vue.component("my-bread", MyBread); //注册组件


在某个文件中使用
<my-bread value1="权限管理" value2="权限列表"></my-bread>

组件的名字应该是写组件的人提供的
将上面的优化一下
1==》其他不变
{
  <script>
    // 自定义组件  面包屑
    export default {
        name: "my-bread", //给组件起一个名字 new add
        data() {
            return {};
        },
        // props外界来的数据
        // props值是字符串数组
        // props中的数据的值，来源于使用组件时 传递的值
     props: ["value1", "value2"]
    };
    </script>
}

2==>
// MyBread是一个对象
import MyBread from "@/components/cuscom/myBread.vue";
Vue.component(MyBread.name, MyBread); //注册组件

3==>
  <my-bread value1="权限管理" value2="权限列表"></my-bread>

  13day
  每一个青丘 都要携带请求头 除了登录页面
  所以优化一下代码
  http.js文件如下
  {

        import axios from "axios";
        const MyHttpServer = {};
        MyHttpServer.install = Vue => {
        axios.defaults.baseURL = "http://api.xiaomadagege.cn:8808/api/private/v1/";

        // 添加请求拦截器--new add
        axios.interceptors.request.use(
            function(config) {
            // 在发送请求之前做些什么--判断是否是login的请求
            // config返回的是一个对象 {url: "rights/list", method: "get", headers: {…}, baseURL: "http://api.xiaomadagege.cn:8808/api/private/v1/", transformRequest: Array(1), …}
            if (config.url !== "login") {
                //不是login 清代请求头
                const AUTH_TOKEN = localStorage.getItem("token");
                config.headers.common["Authorization"] = AUTH_TOKEN;
            }
            return config;
            },
            function(error) {
            // 对请求错误做些什么
            return Promise.reject(error);
            }
        );

        // 添加响应拦截器
        axios.interceptors.response.use(
            function(response) {
            // 对响应数据做点什么
            return response;
            },
            function(error) {
            // 对响应错误做点什么
            return Promise.reject(error);
            }
        );

        //新增结束

        // 添加实例的方法
        Vue.prototype.$http = axios;
        };

        export default MyHttpServer;

  }

  把其他页面的设置青丘头删除了

  15day
  使用v-if对数据进行判断 tableData也可以改为scope

 <el-table-column prop="address" label="层级">
        <template slot-scope="tableData">
          <span v-if="tableData.row.level=='0'">一级</span>
          <span v-if="tableData.row.level=='1'">二级</span>
          <span v-if="tableData.row.level=='2'">三级</span>
        </template>
 </el-table-column>

 16day
  //整个实例出来     配置路由守卫 
 const router = new Router({
   //这里面是路由配置哈
 }) 


 router.beforeEach((to, from, next) => {
  if (to.path == "/login") {
    next();
  } else {
    const token = localStorage.getItem("token");
    if (token) {
      next();
    } else {
      router.push({
        name: "login"
      });
    }
  }
});

另外一种 增加一个消失提示
import { Message } from "element-ui"; //引入消失提示

router.beforeEach((to, from, next) => {
  if (to.path == "/login") {
    next();
  } else {
    const token = localStorage.getItem("token");
    if (!token) {
      Message.success("回到登录页"); //消息提示
      // 没有token
      router.push({
        name: "login"
      });
      return false;
    } else {
      next();
    }
  }
});

16day 16-项目-权限管理-权限列表-表格展示-固定表头 ok

17day 17-项目-权限管理-角色列表-新建组件-配置路由  ok

18-项目-权限管理-角色列表-面包屑和添加按钮
<template>
  <div>

    <!-- 面包写 之前封装成了组件  直接用就好了 -->
    <my-bread value1="权限管理" value2="角色列表"></my-bread>

    <!-- 添加按钮 -->
    <el-row>
      <el-col>
        <el-button type="primary">添加角色</el-button>
      </el-col>
    </el-row>
  </div>
</template>



19-项目-权限管理-角色列表-获取角色列表数据  ok
20-项目-权限管理-角色列表-表格展示  ok
21day 21-项目-权限管理-角色列表-表格展示-展开行功能分析

  <!-- 表格 最初的墨阳  使用的是展开行（展开行） -->
 <el-table :data="tableData" style="width: 100%">
      <el-table-column type="expand">
        <template slot-scope="props">


        </template>
      </el-table-column>

      <el-table-column label="商品 ID" prop="id"></el-table-column>
      <el-table-column label="商品名称" prop="name"></el-table-column>
      <el-table-column label="描述" prop="desc"></el-table-column>
    </el-table>


渲染一行中最左边的数据
 <!-- 表格 -->
    <el-table :data="tableData" style="width: 100%">
      <el-table-column type="expand">
        <template slot-scope="tableData">
          <!-- 展开行的内容 注意下面 tableData.row.children它是一个数组  item.authName是最左边的数据-->
          <el-row v-for="(item,i) in tableData.row.children" :key="i">
            
            <el-col :span="4"> 
              <el-tag>{{item.authName}}</el-tag>
            </el-col>

            <el-col :span="20">
              <el-row>
                <el-col :span="4"></el-col>
                <el-col :span="20"></el-col>
              </el-row>
            </el-col>
          </el-row>

          <!-- 展开行的内容 end -->
        </template>
      </el-table-column>

      <el-table-column label="#" prop="id" type="index"></el-table-column>
      <el-table-column label="角色名称" prop="roleName"></el-table-column>
      <el-table-column label="角色描述" prop="roleDesc"></el-table-column>
      <el-table-column label="操作" prop="desc"></el-table-column>
    </el-table>




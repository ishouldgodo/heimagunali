manager.xiaomadagege.cn

01==> 01-项目-用户管理-用户列表-面包屑和搜索框  ok

el-card 是卡片  基础用法
el-card它可以作为一个小荣器取代 <template>下的div
el-card用来作为一个铺满的容器

<template>
  <el-card class="box-card"></el-card>
</template>

<style  scoped>
.box-card {
  height: 100%;
}



02==>面包写

<el-breadcrumb separator="/">
        <el-breadcrumb-item :to="{ path: '/' }">首页</el-breadcrumb-item>
        <el-breadcrumb-item><a href="/">用户管理</a></el-breadcrumb-item>
        <el-breadcrumb-item>用户列表</el-breadcrumb-item>
 </el-breadcrumb>

04==》搜索框

 用了input中的 复合型输入框
 <el-row> <el-col> 是一行中有一列 new  你以前只晓得div


   <!-- 搜索 添加 clearable输入内容后可以清空-->
    <el-row class="sousuo">
      <el-col>
        <el-input placeholder="请输入内容" v-model="searchvalue" class="input-with-select" clearable>
          <el-button slot="append" icon="el-icon-search"></el-button>
        </el-input>
        <el-button type="primary">添加</el-button>
      </el-col>
    </el-row>

.sousuo {
 margin-top: 20px;
}
/* 搜索框的长度 */
.el-input-group {
  width: 30%;
}  


02day==>02-项目-用户管理-用户列表-引入表格组件
03day==>03-项目-用户管理-用户列表-表头处理

  <el-table-column
       type="index" //序号从1开始排列
        prop="date"
        label="#" 
        width="180">
      </el-table-column>


04day==>04-项目-用户管理-用户列表-请求数据-设置请求头
发送请求
 async getUserlist(){
      const res=await this.$http.get(`users?query=${this.query}&pagenum=${this.pagenum}&${this.pagesize}`)
      console.log(res)
 }

需要授权的Api  获取到的token的值是从后台获取到存进去的
async getUserlist(){
      // 需要授权的Api，必须在青丘头中使用Authorization 字段提供token令牌
      const AUTH_TOKEN=localStorage.getItem("token");
      this.$http.defaults.headers.common['Authorization'] = AUTH_TOKEN;
      const res=await this.$http.get(`users?query=${this.query}&pagenum=${this.pagenum}&pagesize=${this.pagesize}`)
      console.log(res)
    }


05day05-项目-用户管理-用户列表-渲染数据-一般数据

06day  06-项目-用户管理-用户列表-渲染数据-日期格式处理

(1)cnpm i moment -S  

template要使用内部的数据  设置slot-scope属性
slot-scope的值tableData其实就是el-table绑定的数据tableData
userlist.row是数组中的每一个对象

在main.js中 注册全局过滤器 fmtdata是等会你用的 可以自定义

Vue.filter("fmtdata",(v)=>{
  return moment(v).format("YYYY-MM-DD")
})

users.vue文件

 <el-table :data="tableData" style="width: 100%">

      <el-table-column  label="创建时间">
        <template slot-scope="tableData">{{ tableData.row.create_time|fmtdata }}</template>
      </el-table-column>

       <el-table-column prop="name" label="姓名" width="180"></el-table-column>

</el-table>
注意tableData是:data="tableData"绑定的额  slot-scope="tableData"  create_time是字段  fmtdata你全局注册的过滤器
删除 prop=""属性

07day
删除 prop=""属性;  aa字段是true或者为fasle

用户状态的开关
<el-table-column label="用户状态" width="180">
        <template slot-scope="tableData">
          <el-switch v-model="tableData.row.kg" active-color="#13ce66" inactive-color="#ff4949"></el-switch>
        </template>
</el-table-column>


// 组装数据
kaiguan: [true, true, false, true, true, false, true, true, false, false]

for (var i = 0; i < this.tableData.length; i++) {
// 给数组添加一个属性和属性值
this.tableData[i]["kg"] = this.kaiguan[i];
}


08day
按钮样式的调整  size="small"表示按钮的大小  plain最初暗淡 hover时颜色加深

   <el-table-column  label="操作">
        <template slot-scope="tableData">
          <el-button type="primary" size="small" plain icon="el-icon-edit" circle></el-button>
          <el-button type="success" size="small" plain icon="el-icon-check" circle></el-button>
          <el-button type="danger" size="small" plain icon="el-icon-delete" circle></el-button>
        </template>
      </el-table-column>

09day  分页 以后看
10day分页   以后看
11day分页   以后看

12day
  @clear="loadUserlist" 当你点击X小图标时，就会触发

  13day 13-项目-用户管理-用户列表-添加用户-显示对话框 ok


  点击添加  弹出对应的对话框）
  14daay   15day
  14-15-项目-用户管理-用户列表-添加用户-发送请求-处理响应
  
  需求====》点击对话框中的确定按钮  添加用户  发送请求

    <div slot="footer" class="dialog-footer">
        <el-button @click="dialogFormVisible = false">取 消</el-button>
        <el-button type="primary" @click="getserverinfo()">确 定</el-button>
    </div>

      //   对话框的数据
    dialogTableVisible: false, //
    dialogFormVisible: false, //点击是否打开对话框



  
   // 点击确定按钮发送请求
    async getserverinfo() {
      this.dialogFormVisible = false;
      const res = await this.$http.post(`users`, this.form);
      console.log("添加成功", res);
      
      // 解构  
      const {
        meta: { msg, status }
      } = res.data;

      if (status == 201) {
        this.$message({
          showClose: true,
          message: msg,
          type: "success"
        });
        // 跟新试图
         this.getUserlist();
        //  清空弹出曾数据
        this.form={};
      }else{
        this.$message({
          showClose: true,
          message: msg,
          type: "error"
        });

      }
    }



02==>结构
res.date={meta: {msg: "创建成功", status: 201}}
解构
const {
  meta: { msg, status }
} = res.data;



搜索  添加都完成了了

16day-项目-用户管理-用户列表-删除用户-打开确认框(删除功能)  
删除的提示框用的是 （MessageBox 弹框）--》（确认消息）
01==》防止误删除 MessageBox 弹框的运用

     <el-table-column label="操作">
        <template slot-scope="tableData">
          <el-button type="primary" size="small" plain icon="el-icon-edit" circle></el-button>
          <el-button type="success" size="small" plain icon="el-icon-check" circle></el-button>
          <el-button
            @click="mydelete()"
            type="danger"
            size="small"
            plain
            icon="el-icon-delete"
            circle
          ></el-button>
        </template>
      </el-table-column>

          // 删除
    mydelete() {
      this.$confirm("此操作将永久删除该文件, 是否继续?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      })
        .then(() => {
          this.$message({
            type: "success",
            message: "删除成功!"
          });
        })
        .catch(() => {
          this.$message({
            type: "info",
            message: "已取消删除"
          });
        });
    },



17-项目-用户管理-用户列表-删除用户-处理响应
   
请求路径  users/:id
delete



      <el-table-column label="操作">
        <template slot-scope="tableData">
          <el-button type="primary" size="small" plain icon="el-icon-edit" circle></el-button>
          <el-button type="success" size="small" plain icon="el-icon-check" circle></el-button>
          <el-button
            @click="mydelete(tableData.row.id)"  //删除用户id
            type="danger"
            size="small"
            plain
            icon="el-icon-delete"
            circle
          ></el-button>
        </template>
      </el-table-column>


    // 删除
    mydelete(userid) {
      this.$confirm("此操作将永久删除该文件, 是否继续?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      })
        .then( async () => {
          const res=await this.$http.delete(`users/${userid}`); //注意这里的awaiit  离他最近的回调数前面添加 await
          if(res.data.meta.status===200){
                this.getUserlist();
                 this.$message({
                    type: "success",
                    message: "删除成功!"
                 });
          }  
        })
        .catch(() => {
          this.$message({
            type: "info",
            message: "已取消删除"
          });
        });
    },

    
18-项目-用户管理-用户列表-编辑用户-显示对话框 打开嵌套表格的 Dialog
  点击编辑按钮  弹出对话框的显示
  总结：注意两点  对话框
  （1）:visible.sync="dialogFormVisible2"   dialogFormVisible2是绑定的数据
   （2） dialogFormVisible2:false, 对话框消失


     <el-table-column label="操作">
        <template slot-scope="tableData">
          <el-button type="primary"  @click="ediuserdata(tableData.row.id)" size="small" plain icon="el-icon-edit" circle></el-button>
          <el-button type="success" size="small" plain icon="el-icon-check" circle></el-button>
          <el-button
            @click="mydelete(tableData.row)"
            type="danger"
            size="small"
            plain
            icon="el-icon-delete"
            circle
          ></el-button>
        </template>
      </el-table-column>


    <!-- 编辑对话框 -->
    <el-dialog title="收货地址" :visible.sync="dialogFormVisible2">

        <el-form :model="ediform">
            <el-form-item label="用户名" label-width="120px">
               <el-input v-model="ediform.username" autocomplete="off"></el-input>
            </el-form-item>

            <el-form-item label="邮箱" label-width="120px">
               <el-input v-model="ediform.email" autocomplete="off"></el-input>
            </el-form-item>

            <el-form-item label="电话" label-width="120px">
               <el-input v-model="ediform.mobile" autocomplete="off"></el-input>
            </el-form-item>
            
        </el-form>

        <div slot="footer" class="dialog-footer">
            <el-button @click="dialogFormVisible2 = false">取 消</el-button>
            <el-button type="primary" @click="dialogFormVisible2 = false">确 定</el-button>
        </div>

    </el-dialog>
    

     //编辑对话框的数据
      ediform:{
        username: "",
        email: "",
        mobile: ""
      },
      dialogFormVisible2:false,
      


    // 编辑用户数据
    ediuserdata(userinfo){
      this.dialogFormVisible2=true;//打开编辑的对话框
    }



  19day
  当你发现表格区域的内容不够用的时候，你可以给表格一个固定的高度（重要） height="400px"
   <el-table :data="tableData" style="width: 100%" height="400px">
   此地超出就会显示 滚动条


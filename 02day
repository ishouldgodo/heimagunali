
webpack.base.conf  基础配置
 webpack.dev.conf   开发路径
 webpack.prod.conf  生产

本地服务器在dev.env.js中去配置
生产服务器 在prod.env.js中服务

.git
eslint


03 文档分析
DDFE技术文章


04下载
cnpm i  elementui@2.4.11 -S

引入

06==>git的基本命令 ok
创建github 项目名  赋值项目的地址


在跟目录下     生成git文件
 git init     创建git关联文件
 git status   查看一下状态  查看那些文件没有被纳入版本控制(此时出现绿色的加号）    No commits yet 尚未提交
 git add .    纳入    .前有一个空格
 git commit -m"注释"
前4步是本地做的事情

06 好好看一下  ok

git remote add origin https://github.com/ishouldgodo/heimagunali.git   提交到远程仓库
这一步可能会放你关联账号  若没有任何提示  说明你关联成功了  或者你以前关联过

git push -u origin master  最后一步  推送到远程仓库
最后这一步可能  有你输入你的  用户名 和账号  
ishouldgodo  
出现100%  说明推送成功了

之后再推送直接 git push


07day  ok 1
查看有哪些分支  git  branch
默认master分支

创建一个分支 专门写登录功能  分支有开发分支 和生产分支
git  checkout -b 分支名

此时在看看分支 发现有两个分支了


---------
@  会指向src文件

08day ok

form表单  对齐方式
搭建html

09day
01==引入公共css
assets下创建css文件夹 命名为reset.css
它是公共样式 、
公共东西  在 main.js 文件中引入

10day  ok
Vue.use(xx)  这一种是vue插件的用法
说明elementui就是一个插件

02==>重新写axios的插件 
在src下创建一个插件文件为plugins  有http.js文件
根据官方插件  重新写axios的插件 
http.js文件如下
{
    import axios from "axios"
    const MyHttpServer={}
    MyHttpServer.install=(Vue)=>{
        Vue.prototype.$http=axios
    }

    export default MyHttpServer
}

在main.js中去引入
import MyServerHttp from "@/plugins/http.js";
Vue.use(MyServerHttp);

11day ok
01==》给axios设置统一的青丘地址 如何发送青丘
http.js文件如下
{
    import axios from "axios";
    const MyHttpServer = {};
    MyHttpServer.install = (Vue) => {
    axios.defaults.baseURL = "http://api.xiaomadagege.cn:8808/api/private/v1/"; //new add
    Vue.prototype.$http = axios;
    };

    export default MyHttpServer;
}

青丘方法  这些没有要qs转
this.$router.push({ name: "home" });  理由跳转
结构不太懂

this.formLabelAlign携带的参数
  methods: {
    handleLogin() {
      this.$http.post("login", this.formLabelAlign).then(res => {
        // console.log(res); //

        const {  //解构
          data,
          meta: { msg, status }
        } = res.data;

        if (status === 200) {
          this.$router.push({ name: "home" });
        }
      });
    }
  }


  12day  
  01==》使用 消息提示
    this.$message("登录成功");  直接使用  注意this

    解构 
    res.data={"data":null,"meta":{"msg":"密码错误","status":400}}

    如何解构
     const {  
          data,
          meta: { msg, status }
        } = res.data;

     console.log(msg)    //为密码错误


将登录分支推送到远程仓库
先查看 当前有几个分支   git  branch
将当前功能推送到 分支  git push origin 分支名


13day


14day
在异步操作 有结果的前面加一个await
在距离改异步操作最近的函数面前加上一个 aynsc


axios的正常操作
handleLogin() {
      this.$http.post("login", this.formLabelAlign).then(res => {
        // console.log(res);
        const {
          data,
          meta: { msg, status }
        } = res.data;
        if (status === 200) {
          this.$message({
            showClose: true,
            message: msg,
            type: "success"
          });
          this.$router.push({ name: "home" });
        } else {
          this.$message({
            showClose: true,
            message: msg,
            type: "error"
          });
        }
      });
    }

 使用await的方式

     async handleLogin() {
      const res = await this.$http.post("login", this.formLabelAlign);
      // console.log(res);
      const {
        data,
        meta: { msg, status }
      } = res.data;
      if (status === 200) {
        this.$message({
          showClose: true,
          message: msg,
          type: "success"
        });
        this.$router.push({ name: "home" });
      } else {
        this.$message({
          showClose: true,
          message: msg,
          type: "error"
        });
      }
    }


15day
用户登录成功后  保存token
   localStorage.setItem("token",data.token)


16day
后台布局容器

17day
样似头部


18day
19day 
后台首页效果


20如果用户有token 进入后端首页  若是没有  这不能进入后端  跳转到登陆页面
在home.vue中写  其实这样不安全
<script>
export default {
  data() {
    return {};
  },

  beforeCreate() {
    //发送青丘前
    const token = localStorage.getItem("token");
    if (!token) {
      //  说明没有token
      this.$router.push({ name: "login" }); //跳转到登录页面
    }
    //  如果有token继续然然组件
  }
};
</script>

21day
左边 如何图片100%显示
阻止默认事件
<a v-on:click.prevent="doThat"></a>

22day 22-项目-首页-合并分支-新建用户分支
git add .
git commit -m""


git checkout master   切换到主分支
git branch 查看分支状态
git merge dev-login(分支名)   合并分支
git push
1

创建另外一个分支
git checkout -b dev-users

22day

23day配置菜单  路由  以及中间容器

unique-opened="true" 只保留一个菜单
:router="true"开启路由标识
index="users" 是标识 它就会去找这个路由
             

  <el-menu
    default-active="2"
    :router="true"
    :unique-opened="true"
    class="el-menu-vertical-demo"
    @open="handleOpen"
    @close="handleClose"
    background-color="#d3dce6"
    text-color="#fff"
    active-text-color="#ffd04b"
  >

   标识
   <el-menu-item-group>
    <el-menu-item index="users">用户列表</el-menu-item>
    <el-menu-item index="1-2">选项2</el-menu-item>
  </el-menu-item-group>

路由
 {
      path: "/home",
      name: "home",
      component: () => import("../components/home/home.vue"),
      children: [
        {
          path: "/users",
          name: "users",
          component: () => import("../components/users/users.vue")
        }
      ]
    }



将路由的容器写在了home组件的main中
<router-view></router-view>



01day=>
 <el-table-column type="expand"> 
 表格有  type="expand"表示点击的时候可以展开

 02day 权限渲染
    <!-- 表格 -->
    <el-table :data="tableData" style="width: 100%">
      <el-table-column type="expand">
        <template slot-scope="tableData">
          <!-- 展开行的内容  以及权限的渲染-->
          <el-row v-for="(item,i) in tableData.row.children" :key="i">
            <el-col :span="4">
              <el-tag>{{item.authName}}</el-tag>
            </el-col>

            <el-col :span="20">
              <!-- 二级权限渲染 -->
              <el-row v-for="(item2,j) in item.children" :key="j">
                <el-col :span="4">
                  <el-tag>{{item2.authName}}</el-tag>
                </el-col>
                <el-col :span="20">
                  <!-- 三级权限 -->
                  <el-tag v-for="(item3,k) in item2.children" :key="k">{{item3.authName}}</el-tag>
                </el-col>
              </el-row>
            </el-col>
          </el-row>

          <!-- 展开行的内容 end -->
        </template>
      </el-table-column>

      <el-table-column label="#" prop="id" type="index"></el-table-column>
      <el-table-column label="角色名称" prop="roleName"></el-table-column>
      <el-table-column label="角色描述" prop="roleDesc"></el-table-column>
      <el-table-column label="操作" prop="desc"></el-table-column>
    </el-table>
 


export default {
  data() {
    return {
      tableData: []
    };
  },

  created() {
    this.getRolelist();
  },

  methods: {
    async getRolelist() {
      const res = await this.$http.get(`roles`);
      this.tableData = res.data.data;
      console.log(res);
    }
  }
};


ps==>
 <el-tag>是用的标记


03day 03-项目-权限管理-角色列表-表格展示-展开行-样式调整

标记的类型
<el-tag type="success">{{item.authName}}</el-tag>  

可以移除的标记
<el-tag type="info" closable>{{item2.authName}}</el-tag>

 <i class="el-icon-arrow-right"></i> 添加图标



04-项目-权限管理-角色列表-表格展示-展开行-处理无权限的展示
  <!-- 无权限提示 -->
   <span v-if="tableData.row.children.length==0">未分配权限</span>


05day
 @close="delrights(tableData.row.id, item.id)" //一级页面动态传参
 @close="delrights(tableData.row.id, item2.id)" //二级页面动态传参
 @close="delrights(tableData.row.id, item3.id)" //三级页面动态传参

del请求

    // 删除权限
    async delrights(roleid, rightid) {
      const res = await this.$http.delete(`roles/${roleid}/rights/${rightid}`);
      console.log("del青丘删除公共", res);
      this.getRolelist(); //成功之后再次调用
    }


06day


     




14day 动态修改左侧的路由

  <!-- 菜单 -->
          <el-row class="tac mytac">
            <el-col :span="24">
              <!-- unique-opened="true" 只保留一个菜单
                    :router="true"开启路由标识
                    index="users" 是标识 它就会去找这个路由
                    :index的值是一个字符串 :index="''+item.order" 这里使用了字符串拼接  注意使用v-bind
                    :index="item2.path" 动态绑定路径
              -->
              <el-menu
                default-active="2"
                :router="true"
                :unique-opened="true"
                class="el-menu-vertical-demo"
                @open="handleOpen"
                @close="handleClose"
                background-color="#d3dce6"
                text-color="#fff"
                active-text-color="#ffd04b"
              >
                <el-submenu :index="''+item.order" v-for="(item,i) in menutable" :key="i">
                  <template slot="title">
                    <i class="el-icon-location"></i>
                    <span>{{item.authName}}</span>
                  </template>

                  <el-menu-item-group>
                    <el-menu-item
                      :index="item2.path"
                      v-for="(item2,j) in item.children"
                      :key="j"
                    >{{item2.authName}}</el-menu-item>
                  </el-menu-item-group>

           
                </el-submenu>
              </el-menu>
            </el-col>
          </el-row>
          <!--  -->


    created() {
        this.getmenus();
    },

    async getmenus() {
      const res = await this.$http.get(`menus`);
      this.menutable = res.data.data;
    }

    这样 前端在登录的时候将token 存进localStroage中
    用户登录时使用不同的名称  后盾首页就会展示不同的效果
    这样可以实现 不同身份看见不同菜单的效果

    14day==>
    解决git pull/push每次都需要输入密码问题
    https://blog.csdn.net/lxhjh/article/details/81169918

15day(不同角色用户登录-显示对应权限-显示不同的菜单)
16day-17day（跟原来的一样）
18day(演示)

git bash进入你的项目目录，输入：
git config --global credential.helper store

然后你会在你本地生成一个文本，上边记录你的账号和密码。当然这些你可以不用关心。
然后你使用上述的命令配置好之后，再操作一次git pull，然后它会提示你输入账号密码，这一次之后就不需要再次输入密码了

